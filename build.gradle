buildscript {

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5"
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE"
    }
}

/* Sonarqube Task Configuration */
plugins {
    id "org.sonarqube" version "2.6"
}
sonarqube {
    properties {
        property "sonar.host.url", project.hasProperty('sonarHostUrl') ? sonarHostUrl : "http://192.168.0.9:9000"
        property "sonar.projectVersion", "2.6"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "**/*Test*.*,**/Q*.java"
        property "sonar.cpd.exclusions", "**/*Config.java,**/*Configuration.java"
        property "sonar.tests", "src/test/java"
        property "sonar.test.inclusions", "**/*Test.groovy,**/*Test.java"
        property "sonar.coverage.exclusions", "**/*Test*.*,**/Q*.java"
    }
}


apply plugin: 'jacoco'

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"

jacoco {
    toolVersion = "0.8.0"
}

group = "com.dellife"
version = "0.0.1"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}
dependencies {
    compile('org.projectlombok:lombok:1.18.2')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.spockframework:spock-core:1.2-groovy-2.4')
    testCompile('org.spockframework:spock-spring:1.2-groovy-2.4')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.jayway.jsonpath:json-path')
    testCompile('com.jayway.jsonpath:json-path-assert')
    compile('com.github.kingbbode.spring-boot-chatbot:chatbot-spring-boot-slack-starter:0.4.7')
}

test {
    jvmArgs '-XX:+UseG1GC'
    reports {
        junitXml.enabled = true
        html.enabled = true
        ignoreFailures = true
    }
    jacoco {
        enabled = true
        destinationFile = file("${buildDir}/jacoco/jacoco.exec")
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/jacoco/html"
        xml.destination "${buildDir}/reports/jacoco/xml"
    }
    executionData = files("${buildDir}/jacoco/jacoco.exec")
}

sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/xml"
    }
}


